#include "/Engine/Public/Platform.ush"

StructuredBuffer<uint>   InputBuffer	: register(t0);
RWStructuredBuffer<uint> OutPrefixSums	: register(u0);
RWStructuredBuffer<uint> OutGroupSums	: register(u1);
uint NumTriangles;

groupshared uint SharedData[THREAD_GROUP_SIZE];

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void Main(uint3 DispatchThreadID : SV_DispatchThreadID, uint3 GroupThreadID : SV_GroupThreadID, uint3 GroupID : SV_GroupID)
{
	const uint StartIdx = GroupID.x * THREAD_GROUP_SIZE;
	const uint GlobalIdx = StartIdx + GroupThreadID.x;
	const bool bLastThreadInGroup = GroupThreadID.x == (THREAD_GROUP_SIZE - 1);

	// Load data into shared memory for this group's range
	SharedData[GroupThreadID.x] = (GlobalIdx < NumTriangles) ? InputBuffer[GlobalIdx] : 0;
	GroupMemoryBarrierWithGroupSync();

	// Perform local prefix sum in shared memory
	for (uint Offset = 1; Offset < THREAD_GROUP_SIZE; Offset *= 2)
	{
		const uint Temp = (GroupThreadID.x >= Offset) ? SharedData[GroupThreadID.x - Offset] : 0;
		GroupMemoryBarrierWithGroupSync();

		SharedData[GroupThreadID.x] += Temp;
		GroupMemoryBarrierWithGroupSync();
	}

	// Write results to global buffers
	if (GlobalIdx < NumTriangles)
	{
		OutPrefixSums[GlobalIdx] = SharedData[GroupThreadID.x];
	}

	// Store group sum
	if (bLastThreadInGroup)
	{
		OutGroupSums[GroupID.x] = SharedData[GroupThreadID.x];
	}
}