#include "/Engine/Public/Platform.ush"

Buffer<float3> VertexBuffer : register(t0);
Buffer<uint>  IndexBuffer  : register(t1);
//RWStructuredBuffer<uint> OutputBuffer : register(u0);

uint NumVertices;
uint NumTriangles;
float4x4 GlobalTransformMatrix;
uint3 ChunkLocation;



int ClampDown(int Value)
{
    return Value - (Value % VOXEL_SIZE); // Align down to nearest voxel grid
}

int ClampUp(int Value)
{
    return Value + (VOXEL_SIZE - (Value % VOXEL_SIZE)); // Align up to nearest voxel grid
}

struct FAABB2D
{
    int2 Min;
    int2 Max;
};

RWStructuredBuffer<FAABB2D> OutputBuffer : register(u0);

struct FProjectedVertex
{
    int X;
    int Y;
    int MajorAxisValue;

    void SetXY(const int InX, const int InY)
    {
        X = InX;
        Y = InY;
    }
};

struct FProjectedTriangle
{
    FProjectedVertex Vertex0;
    FProjectedVertex Vertex1;
    FProjectedVertex Vertex2;
    uint MajorAxis;
    FAABB2D Bounds;
};

FProjectedTriangle ProjectTriangleTo2D(int3 Vertex0, int3 Vertex1, int3 Vertex2)
{
    FProjectedTriangle Triangle2D = (FProjectedTriangle)0;
    
    // Determine the major axis
    const int3 MinValues = min(Vertex0, min(Vertex1, Vertex2));
    const int3 MaxValues = max(Vertex0, max(Vertex1, Vertex2));
    int3 Ranges = MaxValues - MinValues;
    
    if (Ranges.y > Ranges.x && Ranges.y > Ranges.z)
    {
        Triangle2D.MajorAxis = AXIS_Y;
        Triangle2D.Vertex0.MajorAxisValue = Vertex0.y;
        Triangle2D.Vertex1.MajorAxisValue = Vertex1.y;
        Triangle2D.Vertex2.MajorAxisValue = Vertex2.y;
    }
    else if (Ranges.z > Ranges.x)
    {
        Triangle2D.MajorAxis = AXIS_Z;
        Triangle2D.Vertex0.MajorAxisValue = Vertex0.z;
        Triangle2D.Vertex1.MajorAxisValue = Vertex1.z;
        Triangle2D.Vertex2.MajorAxisValue = Vertex2.z;
    }
    else
    {
        Triangle2D.MajorAxis = AXIS_X;
        Triangle2D.Vertex0.MajorAxisValue = Vertex0.x;
        Triangle2D.Vertex1.MajorAxisValue = Vertex1.x;
        Triangle2D.Vertex2.MajorAxisValue = Vertex2.x;
    }

    // Project vertices to 2D by clearing the major axis
    if (Triangle2D.MajorAxis == AXIS_X)
    {
        Triangle2D.Vertex0.SetXY(Vertex0.y, Vertex0.z);
        Triangle2D.Vertex1.SetXY(Vertex1.y, Vertex1.z);
        Triangle2D.Vertex2.SetXY(Vertex2.y, Vertex2.z);
    }
    else if (Triangle2D.MajorAxis == AXIS_Y)
    {
        Triangle2D.Vertex0.SetXY(Vertex0.x, Vertex0.z);
        Triangle2D.Vertex1.SetXY(Vertex1.x, Vertex1.z);
        Triangle2D.Vertex2.SetXY(Vertex2.x, Vertex2.z);
    }
    else // AXIS_Z
    {
        Triangle2D.Vertex0.SetXY(Vertex0.x, Vertex0.y);
        Triangle2D.Vertex1.SetXY(Vertex1.x, Vertex1.y);
        Triangle2D.Vertex2.SetXY(Vertex2.x, Vertex2.y);
    }

    // Calculate the AABB.
    Triangle2D.Bounds.Min.x = min(Triangle2D.Vertex0.X, min(Triangle2D.Vertex1.X, Triangle2D.Vertex2.X));
    Triangle2D.Bounds.Max.x = max(Triangle2D.Vertex0.X, max(Triangle2D.Vertex1.X, Triangle2D.Vertex2.X));
    Triangle2D.Bounds.Min.y = min(Triangle2D.Vertex0.Y, min(Triangle2D.Vertex1.Y, Triangle2D.Vertex2.Y));
    Triangle2D.Bounds.Max.y = max(Triangle2D.Vertex0.Y, max(Triangle2D.Vertex1.Y, Triangle2D.Vertex2.Y));
    
    return Triangle2D;
}

uint GetVoxelCount(const FProjectedTriangle ProjectedTriangle)
{
    const FAABB2D Bounds = ProjectedTriangle.Bounds;

    const int AlignedMinX = ClampDown(Bounds.Min.x);
    const int AlignedMaxX = ClampUp(Bounds.Max.x);
    const int AlignedMinY = ClampDown(Bounds.Min.y);
    const int AlignedMaxY = ClampUp(Bounds.Max.y);

    // Validate bounds
    if (AlignedMaxX <= AlignedMinX || AlignedMaxY <= AlignedMinY)
    {
        return 0;
    }

    int Width = (AlignedMaxX - AlignedMinX) / VOXEL_SIZE;
    int Height = (AlignedMaxY - AlignedMinY) / VOXEL_SIZE;

    return max(1, Width * Height);
}

[numthreads(64, 1, 1)]
void GetPointCountPerTriangle(uint3 DispatchThreadID : SV_DispatchThreadID)
{
    const uint TriangleIdx = DispatchThreadID.x;
    if (TriangleIdx >= NumTriangles) return;
    const uint TriangleIdxOffset = TriangleIdx * 3;

    // Get triangle in global space, reinterpreted as integer.
    const int3 GlobalVertex0 = (int3)mul(GlobalTransformMatrix, float4(VertexBuffer[IndexBuffer[TriangleIdxOffset + 0]], 1.0f)).xyz;
    const int3 GlobalVertex1 = (int3)mul(GlobalTransformMatrix, float4(VertexBuffer[IndexBuffer[TriangleIdxOffset + 1]], 1.0f)).xyz;
    const int3 GlobalVertex2 = (int3)mul(GlobalTransformMatrix, float4(VertexBuffer[IndexBuffer[TriangleIdxOffset + 2]], 1.0f)).xyz;

    const FProjectedTriangle Triangle2D = ProjectTriangleTo2D(GlobalVertex0, GlobalVertex1, GlobalVertex2);
    // OutputBuffer[TriangleIdx] = uint2(GetVoxelCount(Triangle2D), Triangle2D.MajorAxis);
    OutputBuffer[TriangleIdx] = Triangle2D.Bounds;
}