#include "/Engine/Public/Platform.ush"

StructuredBuffer<uint>   InputBuffer	: register(t0);
RWStructuredBuffer<uint> OutPrefixSums	: register(u0);
RWStructuredBuffer<uint> OutGroupSums	: register(u1);
uint NumElements;

groupshared uint SharedData[THREAD_GROUP_SIZE];

[numthreads(THREAD_GROUP_SIZE, 1, 1)]
void Main(uint3 GlobalThreadID : SV_DispatchThreadID, uint3 GroupThreadID : SV_GroupThreadID, uint3 GroupID : SV_GroupID)
{
    const uint GlobalIdx = GlobalThreadID.x;
    const bool bLastThreadInGroup = GroupThreadID.x == (THREAD_GROUP_SIZE - 1);

    // Initialize shared memory
    if (GlobalIdx < NumElements)
    {
        SharedData[GroupThreadID.x] = (GlobalIdx > 0) ? InputBuffer[GlobalIdx - 1] : 0;
    }
    else
    {
        SharedData[GroupThreadID.x] = 0; // Zero out unused threads
    }
    GroupMemoryBarrierWithGroupSync();

    // Compute prefix sum within shared memory
    for (uint Offset = 1; Offset < THREAD_GROUP_SIZE; Offset *= 2)
    {
        uint Temp = 0;
        if (GroupThreadID.x >= Offset && GroupThreadID.x < THREAD_GROUP_SIZE && GlobalIdx < NumElements)
        {
            Temp = SharedData[GroupThreadID.x - Offset];
        }
        GroupMemoryBarrierWithGroupSync();

        if (GlobalIdx < NumElements)
        {
            SharedData[GroupThreadID.x] += Temp;
        }
        GroupMemoryBarrierWithGroupSync();
    }

    // Write back the results to the output buffer
    if (GlobalIdx < NumElements)
    {
        OutPrefixSums[GlobalIdx] = SharedData[GroupThreadID.x];
    }
    else
    {
        OutPrefixSums[GlobalIdx] = 0; // Zero out unused threads
    }

    // Store group sum
    if (bLastThreadInGroup && GlobalIdx < NumElements)
    {
        OutGroupSums[GroupID.x] = SharedData[GroupThreadID.x];
    }
}