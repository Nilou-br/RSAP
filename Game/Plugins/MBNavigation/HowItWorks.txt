

	Variables:

		StaticDepth: Maximum depth for the static nodes; should be set to a value that allows navigation from any point in the level to another, albeit inaccurate; dynamic nodes will fix the innacuracy.
		DynamicDepth: Maximum depth for the octree, the highest resolution layer will be generated close to the player, and certain spots around dynamic objects to allow navigation through small gaps.
		PlayerLODs: Lowest LOD is the DefaultDepth, highest is the MaximumDepth. No values will automatically determine LOD based the two depth variables. 
		CollisionBoxes: list of collision-boxes (FCollisionShape::MakeBox), one for each layer in the SVO, that will be used to check if a given node is occluded.
		NavMesh: Stores the TMap of chunk and potentially other info.
		Chunks: Stores list of pointers to the static octree and all the dynamic octree's for part of the dynamic-object's that are currently inside the chunk.
		Octree/Dynamic octree: Stores the Layers 0-16 where 0 is the root.
		Layer: stores all the voxels where each voxel is accessed and ordered by mort


	Instruction:

		Spawn chunks in a way so that their negative-most corner align with the world-center. And chunks should encompass the whole level.
		chunk-size should be so that a grid of 3x3x3 chunks around the player will cover the whole distance. Or some other better value.
		Store the chunks in a TMap (hash-map) where the key equals its global coordinate divided by the chunk-size for its negative-most corner. ( Or maybe just use its global coord instead of divided by size? )
		Chunks will have a local-coordinate starting from its negative most corner which is used to know the morton-code of children inside this Chunk/Octree.

		Child nodes are recursively generated starting from the corner closest to the root's local coordinate, and inserted into the layers array in morton-code order.
		Recursive method should be run in such a way so that every node insertion into a layer will be in perfect morton-code order, this goes automatically if recursion happens in a certain order.

		Create a list of collision-boxes (FCollisionShape::MakeBox), one for each layer in the SVO, that will be used to check if a given node is occluded.

		Dynamic nodes are stored on the chunk, accessible by DynamicIndex which is stored on voxels that have dynamic children.
		Index 0 is used to access the static octree which never during the lifetime of the level.
		Index 1 till (However many bits are left to store on a voxel.) are used for dynamic nodes.